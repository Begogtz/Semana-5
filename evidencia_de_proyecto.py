# -*- coding: utf-8 -*-
"""Evidencia de proyecto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19atBIyFTBUskniObvZsTxUa0hlk-JQFD
"""

# @title Instalar dependencias (ejecuta solo una vez en Colab)
!apt-get -y install tesseract-ocr > /dev/null
!pip -q install pytesseract pillow

import cv2
import numpy as np
import pytesseract
import re

# Cargar imagen
img = cv2.imread("palabras.jpg")
if img is None:
    raise FileNotFoundError("No se encontró la imagen, revisa la ruta.")

# Convertir a RGB
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

while True:
    # Elegir color
    color = input("\n¿Qué color quieres detectar? (rojo/verde/amarillo/negro/azul): ").strip().lower()

    # Definir rangos RGB
    if color == "rojo":
        lower = np.array([160,   0,   0], dtype=np.uint8)
        upper = np.array([255, 110, 110], dtype=np.uint8)
    elif color == "verde":
        lower = np.array([  0, 120,   0], dtype=np.uint8)
        upper = np.array([120, 255, 120], dtype=np.uint8)
    elif color == "amarillo":
        lower = np.array([180, 180,   0], dtype=np.uint8)
        upper = np.array([255, 255, 150], dtype=np.uint8)
    elif color == "negro":
        lower = np.array([0, 0, 0], dtype=np.uint8)
        upper = np.array([70, 70, 70], dtype=np.uint8)
    elif color == "azul":
        lower = np.array([  0,   0, 120], dtype=np.uint8)
        upper = np.array([120, 120, 255], dtype=np.uint8)
    else:
        print("Color no reconocido. Usa: rojo, verde, amarillo, negro o azul.")
        continue

    # Crear máscara
    mask = cv2.inRange(img_rgb, lower, upper)

    # Fondo blanco + solo el color elegido
    white_bg = np.full_like(img_rgb, 255)
    only_color = white_bg.copy()
    only_color[mask == 255] = img_rgb[mask == 255]

    # Preprocesar para OCR
    gray = cv2.cvtColor(only_color, cv2.COLOR_RGB2GRAY)
    kernel = np.ones((3,3), np.uint8)
    gray = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, kernel, iterations=1)
    gray_big = cv2.resize(gray, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
    _, bin_norm = cv2.threshold(gray_big, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    _, bin_inv  = cv2.threshold(gray_big, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # OCR
    variantes = [
        (bin_norm, r'--oem 3 --psm 7'),
        (bin_inv,  r'--oem 3 --psm 7'),
        (bin_norm, r'--oem 3 --psm 6'),
        (bin_inv,  r'--oem 3 --psm 6'),
        (bin_norm, r'--oem 3 --psm 8'),
        (bin_inv,  r'--oem 3 --psm 8'),
    ]

    mejor = ""
    for im_bin, cfg in variantes:
        txt = pytesseract.image_to_string(im_bin, lang='eng', config=cfg)
        limpio = re.sub(r'[\s]+', ' ', txt).strip()
        if len(limpio) > len(mejor):
            mejor = limpio

    # Mostrar resultado
    print("\nTexto detectado (", color, "):", sep="")
    print(mejor if mejor else "(sin texto)")

    # Preguntar si quiere seguir
    again = input("\n¿Quieres intentar con otro color? (si/no): ").strip().lower()
    if again != "si":
        print("\nProceso terminado ✅")
        break